# when the build does not contain any flag relaxed on scalafix invocation
# check that regular compilation benefits froma prior direct scalafix invocation ...
-> scalafix --check RemoveUnused
-> checkLastCompilationCached
> compile
> checkLastCompilationCached

# ... and indirect scalafix invocation
> set scalacOptions ++= Seq("just_to_invalidate_any_cache") 
> Test / scalafix --check RemoveUnused
-> checkLastCompilationCached
> compile
> checkLastCompilationCached

# we now have 2 fatal warnings preventing compilation
> set scalacOptions ++= Seq("-Xfatal-warnings")
-> compile

# ensure that a semantic rule can be ran despite warnings, to fix one of the warning
> scalafix RemoveUnused

# confirm that the rule was applied and that triggered compilation is cached once the updated file recompiled
> scalafix --check RemoveUnused
-> checkLastCompilationCached
> scalafix --check RemoveUnused
> checkLastCompilationCached

# and that -Xfatal-warnings remains honored for regular compilation
-> compile

# confirm that regular compilation succeeds after fixing the last warning
> scalafix ProcedureSyntax
> compile
-> checkLastCompilationCached

# check that regular compilation is cached as usual
> compile
> checkLastCompilationCached

# check that there is no recompilation when running a semantic rule after a regular compilation ...
> scalafix RemoveUnused
> checkLastCompilationCached

# nor when compiling after running a semantic rule
> compile
> checkLastCompilationCached